{"ast":null,"code":"import React, { Component, useState, useImperativeHandle, useContext, useRef, useEffect } from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || from);\n}\n/**\n * Rounds number to given decimal\n * eg. roundNumber(2.34343, 1) => 2.3\n */\n\n\nvar roundNumber = function roundNumber(num, decimal) {\n  return Number(num.toFixed(decimal));\n};\n/**\n * Checks if value is number, if not it returns default value\n * 1# eg. checkIsNumber(2, 30) => 2\n * 2# eg. checkIsNumber(null, 30) => 30\n */\n\n\nvar checkIsNumber = function checkIsNumber(num, defaultValue) {\n  return typeof num === \"number\" ? num : defaultValue;\n};\n\nvar handleCallback = function handleCallback(context, event, callback) {\n  if (callback && typeof callback === \"function\") {\n    callback(context, event);\n  }\n};\n/**\n * Functions should return denominator of the target value, which is the next animation step.\n * t is a value from 0 to 1, reflecting the percentage of animation status.\n */\n\n\nvar easeOut = function easeOut(t) {\n  return -Math.cos(t * Math.PI) / 2 + 0.5;\n}; // linear\n\n\nvar linear = function linear(t) {\n  return t;\n}; // accelerating from zero velocity\n\n\nvar easeInQuad = function easeInQuad(t) {\n  return t * t;\n}; // decelerating to zero velocity\n\n\nvar easeOutQuad = function easeOutQuad(t) {\n  return t * (2 - t);\n}; // acceleration until halfway, then deceleration\n\n\nvar easeInOutQuad = function easeInOutQuad(t) {\n  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n}; // accelerating from zero velocity\n\n\nvar easeInCubic = function easeInCubic(t) {\n  return t * t * t;\n}; // decelerating to zero velocity\n\n\nvar easeOutCubic = function easeOutCubic(t) {\n  return --t * t * t + 1;\n}; // acceleration until halfway, then deceleration\n\n\nvar easeInOutCubic = function easeInOutCubic(t) {\n  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n}; // accelerating from zero velocity\n\n\nvar easeInQuart = function easeInQuart(t) {\n  return t * t * t * t;\n}; // decelerating to zero velocity\n\n\nvar easeOutQuart = function easeOutQuart(t) {\n  return 1 - --t * t * t * t;\n}; // acceleration until halfway, then deceleration\n\n\nvar easeInOutQuart = function easeInOutQuart(t) {\n  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n}; // accelerating from zero velocity\n\n\nvar easeInQuint = function easeInQuint(t) {\n  return t * t * t * t * t;\n}; // decelerating to zero velocity\n\n\nvar easeOutQuint = function easeOutQuint(t) {\n  return 1 + --t * t * t * t * t;\n}; // acceleration until halfway, then deceleration\n\n\nvar easeInOutQuint = function easeInOutQuint(t) {\n  return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n};\n\nvar animations = {\n  easeOut: easeOut,\n  linear: linear,\n  easeInQuad: easeInQuad,\n  easeOutQuad: easeOutQuad,\n  easeInOutQuad: easeInOutQuad,\n  easeInCubic: easeInCubic,\n  easeOutCubic: easeOutCubic,\n  easeInOutCubic: easeInOutCubic,\n  easeInQuart: easeInQuart,\n  easeOutQuart: easeOutQuart,\n  easeInOutQuart: easeInOutQuart,\n  easeInQuint: easeInQuint,\n  easeOutQuint: easeOutQuint,\n  easeInOutQuint: easeInOutQuint\n};\n\nvar handleCancelAnimationFrame = function handleCancelAnimationFrame(animation) {\n  if (typeof animation === \"number\") {\n    cancelAnimationFrame(animation);\n  }\n};\n\nvar handleCancelAnimation = function handleCancelAnimation(contextInstance) {\n  if (!contextInstance.mounted) return;\n  handleCancelAnimationFrame(contextInstance.animation); // Clear animation state\n\n  contextInstance.animate = false;\n  contextInstance.animation = null;\n  contextInstance.velocity = null;\n};\n\nfunction handleSetupAnimation(contextInstance, animationName, animationTime, callback) {\n  if (!contextInstance.mounted) return;\n  var startTime = new Date().getTime();\n  var lastStep = 1; // if another animation is active\n\n  handleCancelAnimation(contextInstance); // new animation\n\n  contextInstance.animation = function () {\n    if (!contextInstance.mounted) {\n      return handleCancelAnimationFrame(contextInstance.animation);\n    }\n\n    var frameTime = new Date().getTime() - startTime;\n    var animationProgress = frameTime / animationTime;\n    var animationType = animations[animationName];\n    var step = animationType(animationProgress);\n\n    if (frameTime >= animationTime) {\n      callback(lastStep);\n      contextInstance.animation = null;\n    } else if (contextInstance.animation) {\n      callback(step);\n      requestAnimationFrame(contextInstance.animation);\n    }\n  };\n\n  requestAnimationFrame(contextInstance.animation);\n}\n\nfunction animate(contextInstance, targetState, animationTime, animationName) {\n  var isValid = isValidTargetState(targetState);\n  if (!contextInstance.mounted || !isValid) return;\n  var setTransformState = contextInstance.setTransformState;\n  var _a = contextInstance.transformState,\n      scale = _a.scale,\n      positionX = _a.positionX,\n      positionY = _a.positionY;\n  var scaleDiff = targetState.scale - scale;\n  var positionXDiff = targetState.positionX - positionX;\n  var positionYDiff = targetState.positionY - positionY;\n\n  if (animationTime === 0) {\n    setTransformState(targetState.scale, targetState.positionX, targetState.positionY);\n  } else {\n    // animation start timestamp\n    handleSetupAnimation(contextInstance, animationName, animationTime, function (step) {\n      var newScale = scale + scaleDiff * step;\n      var newPositionX = positionX + positionXDiff * step;\n      var newPositionY = positionY + positionYDiff * step;\n      setTransformState(newScale, newPositionX, newPositionY);\n    });\n  }\n}\n\nfunction isValidTargetState(targetState) {\n  var scale = targetState.scale,\n      positionX = targetState.positionX,\n      positionY = targetState.positionY;\n\n  if (isNaN(scale) || isNaN(positionX) || isNaN(positionY)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getComponentsSizes(wrapperComponent, contentComponent, newScale) {\n  var wrapperWidth = wrapperComponent.offsetWidth;\n  var wrapperHeight = wrapperComponent.offsetHeight;\n  var contentWidth = contentComponent.offsetWidth;\n  var contentHeight = contentComponent.offsetHeight;\n  var newContentWidth = contentWidth * newScale;\n  var newContentHeight = contentHeight * newScale;\n  var newDiffWidth = wrapperWidth - newContentWidth;\n  var newDiffHeight = wrapperHeight - newContentHeight;\n  return {\n    wrapperWidth: wrapperWidth,\n    wrapperHeight: wrapperHeight,\n    newContentWidth: newContentWidth,\n    newDiffWidth: newDiffWidth,\n    newContentHeight: newContentHeight,\n    newDiffHeight: newDiffHeight\n  };\n}\n\nvar getBounds = function getBounds(wrapperWidth, newContentWidth, diffWidth, wrapperHeight, newContentHeight, diffHeight, centerZoomedOut) {\n  var scaleWidthFactor = wrapperWidth > newContentWidth ? diffWidth * (centerZoomedOut ? 1 : 0.5) : 0;\n  var scaleHeightFactor = wrapperHeight > newContentHeight ? diffHeight * (centerZoomedOut ? 1 : 0.5) : 0;\n  var minPositionX = wrapperWidth - newContentWidth - scaleWidthFactor;\n  var maxPositionX = scaleWidthFactor;\n  var minPositionY = wrapperHeight - newContentHeight - scaleHeightFactor;\n  var maxPositionY = scaleHeightFactor;\n  return {\n    minPositionX: minPositionX,\n    maxPositionX: maxPositionX,\n    minPositionY: minPositionY,\n    maxPositionY: maxPositionY\n  };\n};\n\nvar calculateBounds = function calculateBounds(contextInstance, newScale) {\n  var wrapperComponent = contextInstance.wrapperComponent,\n      contentComponent = contextInstance.contentComponent;\n  var centerZoomedOut = contextInstance.setup.centerZoomedOut;\n\n  if (!wrapperComponent || !contentComponent) {\n    throw new Error(\"Components are not mounted\");\n  }\n\n  var _a = getComponentsSizes(wrapperComponent, contentComponent, newScale),\n      wrapperWidth = _a.wrapperWidth,\n      wrapperHeight = _a.wrapperHeight,\n      newContentWidth = _a.newContentWidth,\n      newDiffWidth = _a.newDiffWidth,\n      newContentHeight = _a.newContentHeight,\n      newDiffHeight = _a.newDiffHeight;\n\n  var bounds = getBounds(wrapperWidth, newContentWidth, newDiffWidth, wrapperHeight, newContentHeight, newDiffHeight, Boolean(centerZoomedOut));\n  return bounds;\n};\n\nvar handleCalculateBounds = function handleCalculateBounds(contextInstance, newScale) {\n  var bounds = calculateBounds(contextInstance, newScale); // Save bounds\n\n  contextInstance.bounds = bounds;\n  return bounds;\n};\n\nfunction getMouseBoundedPosition(positionX, positionY, bounds, limitToBounds, paddingValueX, paddingValueY, wrapperComponent) {\n  var minPositionX = bounds.minPositionX,\n      minPositionY = bounds.minPositionY,\n      maxPositionX = bounds.maxPositionX,\n      maxPositionY = bounds.maxPositionY;\n  var paddingX = 0;\n  var paddingY = 0;\n\n  if (wrapperComponent) {\n    paddingX = paddingValueX;\n    paddingY = paddingValueY;\n  }\n\n  var x = boundLimiter(positionX, minPositionX - paddingX, maxPositionX + paddingX, limitToBounds);\n  var y = boundLimiter(positionY, minPositionY - paddingY, maxPositionY + paddingY, limitToBounds);\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * Keeps value between given bounds, used for limiting view to given boundaries\n * 1# eg. boundLimiter(2, 0, 3, true) => 2\n * 2# eg. boundLimiter(4, 0, 3, true) => 3\n * 3# eg. boundLimiter(-2, 0, 3, true) => 0\n * 4# eg. boundLimiter(10, 0, 3, false) => 10\n */\n\n\nvar boundLimiter = function boundLimiter(value, minBound, maxBound, isActive) {\n  if (!isActive) return roundNumber(value, 2);\n  if (value < minBound) return roundNumber(minBound, 2);\n  if (value > maxBound) return roundNumber(maxBound, 2);\n  return roundNumber(value, 2);\n};\n\nfunction handleCalculateZoomPositions(contextInstance, mouseX, mouseY, newScale, bounds, limitToBounds) {\n  var _a = contextInstance.transformState,\n      scale = _a.scale,\n      positionX = _a.positionX,\n      positionY = _a.positionY;\n  var scaleDifference = newScale - scale;\n\n  if (typeof mouseX !== \"number\" || typeof mouseY !== \"number\") {\n    console.error(\"Mouse X and Y position were not provided!\");\n    return {\n      x: positionX,\n      y: positionY\n    };\n  }\n\n  var calculatedPositionX = positionX - mouseX * scaleDifference;\n  var calculatedPositionY = positionY - mouseY * scaleDifference; // do not limit to bounds when there is padding animation,\n  // it causes animation strange behaviour\n\n  var newPositions = getMouseBoundedPosition(calculatedPositionX, calculatedPositionY, bounds, limitToBounds, 0, 0, null);\n  return newPositions;\n}\n\nfunction checkZoomBounds(zoom, minScale, maxScale, zoomPadding, enablePadding) {\n  var scalePadding = enablePadding ? zoomPadding : 0;\n  var minScaleWithPadding = minScale - scalePadding;\n  if (!isNaN(maxScale) && zoom >= maxScale) return maxScale;\n  if (!isNaN(minScale) && zoom <= minScaleWithPadding) return minScaleWithPadding;\n  return zoom;\n}\n\nvar isPanningStartAllowed = function isPanningStartAllowed(contextInstance, event) {\n  var excluded = contextInstance.setup.panning.excluded;\n  var isInitialized = contextInstance.isInitialized,\n      wrapperComponent = contextInstance.wrapperComponent;\n  var target = event.target;\n  var isWrapperChild = wrapperComponent === null || wrapperComponent === void 0 ? void 0 : wrapperComponent.contains(target);\n  var isAllowed = isInitialized && target && isWrapperChild;\n  if (!isAllowed) return false;\n  var isExcluded = isExcludedNode(target, excluded);\n  if (isExcluded) return false;\n  return true;\n};\n\nvar isPanningAllowed = function isPanningAllowed(contextInstance) {\n  var isInitialized = contextInstance.isInitialized,\n      isPanning = contextInstance.isPanning,\n      setup = contextInstance.setup;\n  var disabled = setup.panning.disabled;\n  var isAllowed = isInitialized && isPanning && !disabled;\n  if (!isAllowed) return false;\n  return true;\n};\n\nvar handlePanningSetup = function handlePanningSetup(contextInstance, event) {\n  var _a = contextInstance.transformState,\n      positionX = _a.positionX,\n      positionY = _a.positionY;\n  contextInstance.isPanning = true; // Panning with mouse\n\n  var x = event.clientX;\n  var y = event.clientY;\n  contextInstance.startCoords = {\n    x: x - positionX,\n    y: y - positionY\n  };\n};\n\nvar handleTouchPanningSetup = function handleTouchPanningSetup(contextInstance, event) {\n  var touches = event.touches;\n  var _a = contextInstance.transformState,\n      positionX = _a.positionX,\n      positionY = _a.positionY;\n  contextInstance.isPanning = true; // Panning with touch\n\n  var oneFingerTouch = touches.length === 1;\n\n  if (oneFingerTouch) {\n    var x = touches[0].clientX;\n    var y = touches[0].clientY;\n    contextInstance.startCoords = {\n      x: x - positionX,\n      y: y - positionY\n    };\n  }\n};\n\nfunction handlePanToBounds(contextInstance) {\n  var _a = contextInstance.transformState,\n      positionX = _a.positionX,\n      positionY = _a.positionY,\n      scale = _a.scale;\n  var _b = contextInstance.setup,\n      disabled = _b.disabled,\n      limitToBounds = _b.limitToBounds,\n      centerZoomedOut = _b.centerZoomedOut;\n  var wrapperComponent = contextInstance.wrapperComponent;\n  if (disabled || !wrapperComponent || !contextInstance.bounds) return;\n  var _c = contextInstance.bounds,\n      maxPositionX = _c.maxPositionX,\n      minPositionX = _c.minPositionX,\n      maxPositionY = _c.maxPositionY,\n      minPositionY = _c.minPositionY;\n  var xChanged = positionX > maxPositionX || positionX < minPositionX;\n  var yChanged = positionY > maxPositionY || positionY < minPositionY;\n  var mousePosX = positionX > maxPositionX ? wrapperComponent.offsetWidth : contextInstance.setup.minPositionX || 0;\n  var mousePosY = positionY > maxPositionY ? wrapperComponent.offsetHeight : contextInstance.setup.minPositionY || 0;\n\n  var _d = handleCalculateZoomPositions(contextInstance, mousePosX, mousePosY, scale, contextInstance.bounds, limitToBounds || centerZoomedOut),\n      x = _d.x,\n      y = _d.y;\n\n  return {\n    scale: scale,\n    positionX: xChanged ? x : positionX,\n    positionY: yChanged ? y : positionY\n  };\n}\n\nfunction handleNewPosition(contextInstance, newPositionX, newPositionY, paddingValueX, paddingValueY) {\n  var limitToBounds = contextInstance.setup.limitToBounds;\n  var wrapperComponent = contextInstance.wrapperComponent,\n      bounds = contextInstance.bounds;\n  var _a = contextInstance.transformState,\n      scale = _a.scale,\n      positionX = _a.positionX,\n      positionY = _a.positionY;\n  var hasPositionXChanged = newPositionX !== positionX;\n  var hasPositionYChanged = newPositionY !== positionY;\n  var hasNewPosition = !hasPositionXChanged || !hasPositionYChanged;\n\n  if (!wrapperComponent || hasNewPosition || !bounds) {\n    return;\n  }\n\n  var _b = getMouseBoundedPosition(newPositionX, newPositionY, bounds, limitToBounds, paddingValueX, paddingValueY, wrapperComponent),\n      x = _b.x,\n      y = _b.y;\n\n  contextInstance.setTransformState(scale, x, y);\n}\n\nvar getPanningClientPosition = function getPanningClientPosition(contextInstance, clientX, clientY) {\n  var startCoords = contextInstance.startCoords,\n      transformState = contextInstance.transformState;\n  var panning = contextInstance.setup.panning;\n  var lockAxisX = panning.lockAxisX,\n      lockAxisY = panning.lockAxisY;\n  var positionX = transformState.positionX,\n      positionY = transformState.positionY;\n\n  if (!startCoords) {\n    return {\n      x: positionX,\n      y: positionY\n    };\n  }\n\n  var mouseX = clientX - startCoords.x;\n  var mouseY = clientY - startCoords.y;\n  var newPositionX = lockAxisX ? positionX : mouseX;\n  var newPositionY = lockAxisY ? positionY : mouseY;\n  return {\n    x: newPositionX,\n    y: newPositionY\n  };\n};\n\nvar getPaddingValue = function getPaddingValue(contextInstance, size) {\n  var setup = contextInstance.setup,\n      transformState = contextInstance.transformState;\n  var scale = transformState.scale;\n  var minScale = setup.minScale;\n\n  if (size > 0 && scale >= minScale) {\n    return size;\n  }\n\n  return 0;\n};\n\nvar isVelocityCalculationAllowed = function isVelocityCalculationAllowed(contextInstance) {\n  var mounted = contextInstance.mounted;\n  var _a = contextInstance.setup,\n      disabled = _a.disabled,\n      velocityAnimation = _a.velocityAnimation;\n  var scale = contextInstance.transformState.scale;\n  var disabledVelocity = velocityAnimation.disabled;\n  var isAllowed = !disabledVelocity || scale > 1 || !disabled || mounted;\n  if (!isAllowed) return false;\n  return true;\n};\n\nvar isVelocityAllowed = function isVelocityAllowed(contextInstance) {\n  var mounted = contextInstance.mounted,\n      velocity = contextInstance.velocity,\n      bounds = contextInstance.bounds;\n  var _a = contextInstance.setup,\n      disabled = _a.disabled,\n      velocityAnimation = _a.velocityAnimation;\n  var scale = contextInstance.transformState.scale;\n  var disabledVelocity = velocityAnimation.disabled;\n  var isAllowed = !disabledVelocity || scale > 1 || !disabled || mounted;\n  if (!isAllowed) return false;\n  if (!velocity || !bounds) return false;\n  return true;\n};\n\nfunction getVelocityMoveTime(contextInstance, velocity) {\n  var velocityAnimation = contextInstance.setup.velocityAnimation;\n  var equalToMove = velocityAnimation.equalToMove,\n      animationTime = velocityAnimation.animationTime,\n      sensitivity = velocityAnimation.sensitivity;\n\n  if (equalToMove) {\n    return animationTime * velocity * sensitivity;\n  }\n\n  return animationTime;\n}\n\nfunction getVelocityPosition(newPosition, startPosition, currentPosition, isLocked, limitToBounds, minPosition, maxPosition, minTarget, maxTarget, step) {\n  if (limitToBounds) {\n    if (startPosition > maxPosition && currentPosition > maxPosition) {\n      var calculatedPosition = maxPosition + (newPosition - maxPosition) * step;\n      if (calculatedPosition > maxTarget) return maxTarget;\n      if (calculatedPosition < maxPosition) return maxPosition;\n      return calculatedPosition;\n    }\n\n    if (startPosition < minPosition && currentPosition < minPosition) {\n      var calculatedPosition = minPosition + (newPosition - minPosition) * step;\n      if (calculatedPosition < minTarget) return minTarget;\n      if (calculatedPosition > minPosition) return minPosition;\n      return calculatedPosition;\n    }\n  }\n\n  if (isLocked) return startPosition;\n  return boundLimiter(newPosition, minPosition, maxPosition, limitToBounds);\n}\n\nfunction getSizeMultiplier(wrapperComponent, equalToMove) {\n  var defaultMultiplier = 1;\n\n  if (equalToMove) {\n    return Math.min(defaultMultiplier, wrapperComponent.offsetWidth / window.innerWidth);\n  }\n\n  return defaultMultiplier;\n}\n\nfunction handleCalculateVelocity(contextInstance, position) {\n  var isAllowed = isVelocityCalculationAllowed(contextInstance);\n\n  if (!isAllowed) {\n    return;\n  }\n\n  var lastMousePosition = contextInstance.lastMousePosition,\n      velocityTime = contextInstance.velocityTime,\n      setup = contextInstance.setup;\n  var wrapperComponent = contextInstance.wrapperComponent;\n  var equalToMove = setup.velocityAnimation.equalToMove;\n  var now = Date.now();\n\n  if (lastMousePosition && velocityTime && wrapperComponent) {\n    var sizeMultiplier = getSizeMultiplier(wrapperComponent, equalToMove);\n    var distanceX = position.x - lastMousePosition.x;\n    var distanceY = position.y - lastMousePosition.y;\n    var velocityX = distanceX / sizeMultiplier;\n    var velocityY = distanceY / sizeMultiplier;\n    var interval = now - velocityTime;\n    var speed = distanceX * distanceX + distanceY * distanceY;\n    var velocity = Math.sqrt(speed) / interval;\n    contextInstance.velocity = {\n      velocityX: velocityX,\n      velocityY: velocityY,\n      total: velocity\n    };\n  }\n\n  contextInstance.lastMousePosition = position;\n  contextInstance.velocityTime = now;\n}\n\nfunction handleVelocityPanning(contextInstance) {\n  var velocity = contextInstance.velocity,\n      bounds = contextInstance.bounds,\n      setup = contextInstance.setup,\n      wrapperComponent = contextInstance.wrapperComponent;\n  var isAllowed = isVelocityAllowed(contextInstance);\n\n  if (!isAllowed || !velocity || !bounds || !wrapperComponent) {\n    return;\n  }\n\n  var velocityX = velocity.velocityX,\n      velocityY = velocity.velocityY,\n      total = velocity.total;\n  var maxPositionX = bounds.maxPositionX,\n      minPositionX = bounds.minPositionX,\n      maxPositionY = bounds.maxPositionY,\n      minPositionY = bounds.minPositionY;\n  var limitToBounds = setup.limitToBounds,\n      alignmentAnimation = setup.alignmentAnimation;\n  var zoomAnimation = setup.zoomAnimation,\n      panning = setup.panning;\n  var lockAxisY = panning.lockAxisY,\n      lockAxisX = panning.lockAxisX;\n  var animationType = zoomAnimation.animationType;\n  var sizeX = alignmentAnimation.sizeX,\n      sizeY = alignmentAnimation.sizeY,\n      velocityAlignmentTime = alignmentAnimation.velocityAlignmentTime;\n  var alignAnimationTime = velocityAlignmentTime;\n  var moveAnimationTime = getVelocityMoveTime(contextInstance, total);\n  var finalAnimationTime = Math.max(moveAnimationTime, alignAnimationTime);\n  var paddingValueX = getPaddingValue(contextInstance, sizeX);\n  var paddingValueY = getPaddingValue(contextInstance, sizeY);\n  var paddingX = paddingValueX * wrapperComponent.offsetWidth / 100;\n  var paddingY = paddingValueY * wrapperComponent.offsetHeight / 100;\n  var maxTargetX = maxPositionX + paddingX;\n  var minTargetX = minPositionX - paddingX;\n  var maxTargetY = maxPositionY + paddingY;\n  var minTargetY = minPositionY - paddingY;\n  var startState = contextInstance.transformState;\n  var startTime = new Date().getTime();\n  handleSetupAnimation(contextInstance, animationType, finalAnimationTime, function (step) {\n    var _a = contextInstance.transformState,\n        scale = _a.scale,\n        positionX = _a.positionX,\n        positionY = _a.positionY;\n    var frameTime = new Date().getTime() - startTime;\n    var animationProgress = frameTime / alignAnimationTime;\n    var alignAnimation = animations[alignmentAnimation.animationType];\n    var alignStep = 1 - alignAnimation(Math.min(1, animationProgress));\n    var customStep = 1 - step;\n    var newPositionX = positionX + velocityX * customStep;\n    var newPositionY = positionY + velocityY * customStep;\n    var currentPositionX = getVelocityPosition(newPositionX, startState.positionX, positionX, lockAxisX, limitToBounds, minPositionX, maxPositionX, minTargetX, maxTargetX, alignStep);\n    var currentPositionY = getVelocityPosition(newPositionY, startState.positionY, positionY, lockAxisY, limitToBounds, minPositionY, maxPositionY, minTargetY, maxTargetY, alignStep);\n\n    if (positionX !== newPositionX || positionY !== newPositionY) {\n      contextInstance.setTransformState(scale, currentPositionX, currentPositionY);\n    }\n  });\n}\n\nfunction handlePanningStart(contextInstance, event) {\n  var scale = contextInstance.transformState.scale;\n  handleCancelAnimation(contextInstance);\n  handleCalculateBounds(contextInstance, scale);\n\n  if (event.touches) {\n    handleTouchPanningSetup(contextInstance, event);\n  } else {\n    handlePanningSetup(contextInstance, event);\n  }\n}\n\nfunction handlePanning(contextInstance, clientX, clientY) {\n  var startCoords = contextInstance.startCoords,\n      setup = contextInstance.setup;\n  var _a = setup.alignmentAnimation,\n      sizeX = _a.sizeX,\n      sizeY = _a.sizeY;\n  if (!startCoords) return;\n\n  var _b = getPanningClientPosition(contextInstance, clientX, clientY),\n      x = _b.x,\n      y = _b.y;\n\n  var paddingValueX = getPaddingValue(contextInstance, sizeX);\n  var paddingValueY = getPaddingValue(contextInstance, sizeY);\n  handleCalculateVelocity(contextInstance, {\n    x: x,\n    y: y\n  });\n  handleNewPosition(contextInstance, x, y, paddingValueX, paddingValueY);\n}\n\nfunction handlePanningEnd(contextInstance) {\n  if (contextInstance.isPanning) {\n    var velocityDisabled = contextInstance.setup.panning.velocityDisabled;\n    var velocity = contextInstance.velocity,\n        wrapperComponent = contextInstance.wrapperComponent,\n        contentComponent = contextInstance.contentComponent;\n    contextInstance.isPanning = false;\n    contextInstance.animate = false;\n    contextInstance.animation = null;\n    var wrapperRect = wrapperComponent === null || wrapperComponent === void 0 ? void 0 : wrapperComponent.getBoundingClientRect();\n    var contentRect = contentComponent === null || contentComponent === void 0 ? void 0 : contentComponent.getBoundingClientRect();\n    var wrapperWidth = (wrapperRect === null || wrapperRect === void 0 ? void 0 : wrapperRect.width) || 0;\n    var wrapperHeight = (wrapperRect === null || wrapperRect === void 0 ? void 0 : wrapperRect.height) || 0;\n    var contentWidth = (contentRect === null || contentRect === void 0 ? void 0 : contentRect.width) || 0;\n    var contentHeight = (contentRect === null || contentRect === void 0 ? void 0 : contentRect.height) || 0;\n    var isZoomed = wrapperWidth < contentWidth || wrapperHeight < contentHeight;\n    var shouldAnimate = !velocityDisabled && velocity && (velocity === null || velocity === void 0 ? void 0 : velocity.total) > 0.1 && isZoomed;\n\n    if (shouldAnimate) {\n      handleVelocityPanning(contextInstance);\n    } else {\n      handleAlignToBounds(contextInstance);\n    }\n  }\n}\n\nfunction handleAlignToBounds(contextInstance) {\n  var scale = contextInstance.transformState.scale;\n  var _a = contextInstance.setup,\n      minScale = _a.minScale,\n      alignmentAnimation = _a.alignmentAnimation;\n  var disabled = alignmentAnimation.disabled,\n      sizeX = alignmentAnimation.sizeX,\n      sizeY = alignmentAnimation.sizeY,\n      animationTime = alignmentAnimation.animationTime,\n      animationType = alignmentAnimation.animationType;\n  var isDisabled = disabled || scale < minScale || !sizeX && !sizeY;\n  if (isDisabled) return;\n  var targetState = handlePanToBounds(contextInstance);\n\n  if (targetState) {\n    animate(contextInstance, targetState, animationTime, animationType);\n  }\n}\n\nfunction handleAlignToScaleBounds(contextInstance, mousePositionX, mousePositionY) {\n  var scale = contextInstance.transformState.scale;\n  var wrapperComponent = contextInstance.wrapperComponent;\n  var _a = contextInstance.setup,\n      minScale = _a.minScale,\n      limitToBounds = _a.limitToBounds,\n      zoomAnimation = _a.zoomAnimation;\n  var disabled = zoomAnimation.disabled,\n      animationTime = zoomAnimation.animationTime,\n      animationType = zoomAnimation.animationType;\n  var isDisabled = disabled || scale >= minScale;\n\n  if (scale >= 1 || limitToBounds) {\n    // fire fit to bounds animation\n    handleAlignToBounds(contextInstance);\n  }\n\n  if (isDisabled || !wrapperComponent || !contextInstance.mounted) return;\n  var mouseX = mousePositionX || wrapperComponent.offsetWidth / 2;\n  var mouseY = mousePositionY || wrapperComponent.offsetHeight / 2;\n  var targetState = handleZoomToPoint(contextInstance, minScale, mouseX, mouseY);\n\n  if (targetState) {\n    animate(contextInstance, targetState, animationTime, animationType);\n  }\n}\n\nfunction handleZoomToPoint(contextInstance, scale, mouseX, mouseY) {\n  var _a = contextInstance.setup,\n      minScale = _a.minScale,\n      maxScale = _a.maxScale,\n      limitToBounds = _a.limitToBounds;\n  var newScale = checkZoomBounds(roundNumber(scale, 2), minScale, maxScale, 0, false);\n  var bounds = handleCalculateBounds(contextInstance, newScale);\n\n  var _b = handleCalculateZoomPositions(contextInstance, mouseX, mouseY, newScale, bounds, limitToBounds),\n      x = _b.x,\n      y = _b.y;\n\n  return {\n    scale: newScale,\n    positionX: x,\n    positionY: y\n  };\n}\n\nvar initialState = {\n  previousScale: 1,\n  scale: 1,\n  positionX: 0,\n  positionY: 0\n};\n\nvar contextInitialState = _assign(_assign({}, initialState), {\n  setComponents: function setComponents() {\n    return undefined;\n  },\n  contextInstance: null\n});\n\nvar initialSetup = {\n  disabled: false,\n  minPositionX: null,\n  maxPositionX: null,\n  minPositionY: null,\n  maxPositionY: null,\n  minScale: 1,\n  maxScale: 8,\n  limitToBounds: true,\n  centerZoomedOut: false,\n  centerOnInit: false,\n  wheel: {\n    step: 0.2,\n    disabled: false,\n    wheelDisabled: false,\n    touchPadDisabled: false,\n    activationKeys: [],\n    excluded: []\n  },\n  panning: {\n    disabled: false,\n    velocityDisabled: false,\n    lockAxisX: false,\n    lockAxisY: false,\n    activationKeys: [],\n    excluded: []\n  },\n  pinch: {\n    step: 5,\n    disabled: false,\n    excluded: []\n  },\n  doubleClick: {\n    disabled: false,\n    step: 0.7,\n    mode: \"zoomIn\",\n    animationType: \"easeOut\",\n    animationTime: 200,\n    excluded: []\n  },\n  zoomAnimation: {\n    disabled: false,\n    size: 0.4,\n    animationTime: 200,\n    animationType: \"easeOut\"\n  },\n  alignmentAnimation: {\n    disabled: false,\n    sizeX: 100,\n    sizeY: 100,\n    animationTime: 200,\n    velocityAlignmentTime: 400,\n    animationType: \"easeOut\"\n  },\n  velocityAnimation: {\n    disabled: false,\n    sensitivity: 1,\n    animationTime: 400,\n    animationType: \"easeOut\",\n    equalToMove: true\n  }\n};\n\nvar createState = function createState(props) {\n  var _a, _b, _c, _d;\n\n  return {\n    previousScale: (_a = props.initialScale) !== null && _a !== void 0 ? _a : initialState.scale,\n    scale: (_b = props.initialScale) !== null && _b !== void 0 ? _b : initialState.scale,\n    positionX: (_c = props.initialPositionX) !== null && _c !== void 0 ? _c : initialState.positionX,\n    positionY: (_d = props.initialPositionY) !== null && _d !== void 0 ? _d : initialState.positionY\n  };\n};\n\nvar createSetup = function createSetup(props) {\n  var newSetup = _assign({}, initialSetup);\n\n  Object.keys(props).forEach(function (key) {\n    var validValue = typeof props[key] !== \"undefined\";\n    var validParameter = typeof initialSetup[key] !== \"undefined\";\n\n    if (validParameter && validValue) {\n      var dataType = Object.prototype.toString.call(initialSetup[key]);\n      var isObject = dataType === \"[object Object]\";\n      var isArray = dataType === \"[object Array]\";\n\n      if (isObject) {\n        newSetup[key] = _assign(_assign({}, initialSetup[key]), props[key]);\n      } else if (isArray) {\n        newSetup[key] = __spreadArray(__spreadArray([], initialSetup[key]), props[key]);\n      } else {\n        newSetup[key] = props[key];\n      }\n    }\n  });\n  return newSetup;\n};\n\nvar handleCalculateButtonZoom = function handleCalculateButtonZoom(contextInstance, delta, step) {\n  var scale = contextInstance.transformState.scale;\n  var wrapperComponent = contextInstance.wrapperComponent,\n      setup = contextInstance.setup;\n  var maxScale = setup.maxScale,\n      minScale = setup.minScale,\n      zoomAnimation = setup.zoomAnimation;\n  var size = zoomAnimation.size;\n\n  if (!wrapperComponent) {\n    throw new Error(\"Wrapper is not mounted\");\n  }\n\n  var targetScale = scale * Math.exp(delta * step);\n  var newScale = checkZoomBounds(roundNumber(targetScale, 3), minScale, maxScale, size, false);\n  return newScale;\n};\n\nfunction handleZoomToViewCenter(contextInstance, delta, step, animationTime, animationType) {\n  var wrapperComponent = contextInstance.wrapperComponent;\n  var _a = contextInstance.transformState,\n      scale = _a.scale,\n      positionX = _a.positionX,\n      positionY = _a.positionY;\n  if (!wrapperComponent) return console.error(\"No WrapperComponent found\");\n  var wrapperWidth = wrapperComponent.offsetWidth;\n  var wrapperHeight = wrapperComponent.offsetHeight;\n  var mouseX = (wrapperWidth / 2 - positionX) / scale;\n  var mouseY = (wrapperHeight / 2 - positionY) / scale;\n  var newScale = handleCalculateButtonZoom(contextInstance, delta, step);\n  var targetState = handleZoomToPoint(contextInstance, newScale, mouseX, mouseY);\n\n  if (!targetState) {\n    return console.error(\"Error during zoom event. New transformation state was not calculated.\");\n  }\n\n  animate(contextInstance, targetState, animationTime, animationType);\n}\n\nfunction resetTransformations(contextInstance, animationTime, animationType) {\n  var setup = contextInstance.setup,\n      wrapperComponent = contextInstance.wrapperComponent;\n  var limitToBounds = setup.limitToBounds;\n  var initialTransformation = createState(contextInstance.props);\n  var _a = contextInstance.transformState,\n      scale = _a.scale,\n      positionX = _a.positionX,\n      positionY = _a.positionY;\n  if (!wrapperComponent) return;\n  var newBounds = calculateBounds(contextInstance, initialTransformation.scale);\n  var boundedPositions = getMouseBoundedPosition(initialTransformation.positionX, initialTransformation.positionY, newBounds, limitToBounds, 0, 0, wrapperComponent);\n  var newState = {\n    scale: initialTransformation.scale,\n    positionX: boundedPositions.x,\n    positionY: boundedPositions.y\n  };\n\n  if (scale === initialTransformation.scale && positionX === initialTransformation.positionX && positionY === initialTransformation.positionY) {\n    return;\n  }\n\n  animate(contextInstance, newState, animationTime, animationType);\n}\n\nfunction calculateZoomToNode(contextInstance, node, customZoom) {\n  var wrapperComponent = contextInstance.wrapperComponent;\n  var _a = contextInstance.setup,\n      limitToBounds = _a.limitToBounds,\n      minScale = _a.minScale,\n      maxScale = _a.maxScale;\n  if (!wrapperComponent) return initialState;\n  var wrapperRect = wrapperComponent.getBoundingClientRect();\n  var nodeRect = getOffset(node);\n  var nodeLeft = nodeRect.x;\n  var nodeTop = nodeRect.y;\n  var nodeWidth = node.offsetWidth;\n  var nodeHeight = node.offsetHeight;\n  var scaleX = wrapperComponent.offsetWidth / nodeWidth;\n  var scaleY = wrapperComponent.offsetHeight / nodeHeight;\n  var newScale = checkZoomBounds(customZoom || Math.min(scaleX, scaleY), minScale, maxScale, 0, false);\n  var offsetX = (wrapperRect.width - nodeWidth * newScale) / 2;\n  var offsetY = (wrapperRect.height - nodeHeight * newScale) / 2;\n  var newPositionX = (wrapperRect.left - nodeLeft) * newScale + offsetX;\n  var newPositionY = (wrapperRect.top - nodeTop) * newScale + offsetY;\n  var bounds = calculateBounds(contextInstance, newScale);\n\n  var _b = getMouseBoundedPosition(newPositionX, newPositionY, bounds, limitToBounds, 0, 0, wrapperComponent),\n      x = _b.x,\n      y = _b.y;\n\n  return {\n    positionX: x,\n    positionY: y,\n    scale: newScale\n  };\n}\n\nfunction getOffset(element) {\n  var el = element;\n  var offsetLeft = 0;\n  var offsetTop = 0;\n\n  while (el) {\n    offsetLeft += el.offsetLeft;\n    offsetTop += el.offsetTop;\n    el = el.offsetParent;\n  }\n\n  return {\n    x: offsetLeft,\n    y: offsetTop\n  };\n}\n\nfunction isValidZoomNode(node) {\n  if (!node) {\n    console.error(\"Zoom node not found\");\n    return false;\n  } else if ((node === null || node === void 0 ? void 0 : node.offsetWidth) === undefined || (node === null || node === void 0 ? void 0 : node.offsetHeight) === undefined) {\n    console.error(\"Zoom node is not valid - it must contain offsetWidth and offsetHeight\");\n    return false;\n  }\n\n  return true;\n}\n\nvar zoomIn = function zoomIn(contextInstance) {\n  return function (step, animationTime, animationType) {\n    if (step === void 0) {\n      step = 0.5;\n    }\n\n    if (animationTime === void 0) {\n      animationTime = 300;\n    }\n\n    if (animationType === void 0) {\n      animationType = \"easeOut\";\n    }\n\n    handleZoomToViewCenter(contextInstance, 1, step, animationTime, animationType);\n  };\n};\n\nvar zoomOut = function zoomOut(contextInstance) {\n  return function (step, animationTime, animationType) {\n    if (step === void 0) {\n      step = 0.5;\n    }\n\n    if (animationTime === void 0) {\n      animationTime = 300;\n    }\n\n    if (animationType === void 0) {\n      animationType = \"easeOut\";\n    }\n\n    handleZoomToViewCenter(contextInstance, -1, step, animationTime, animationType);\n  };\n};\n\nvar setTransform = function setTransform(contextInstance) {\n  return function (newPositionX, newPositionY, newScale, animationTime, animationType) {\n    if (animationTime === void 0) {\n      animationTime = 300;\n    }\n\n    if (animationType === void 0) {\n      animationType = \"easeOut\";\n    }\n\n    var _a = contextInstance.transformState,\n        positionX = _a.positionX,\n        positionY = _a.positionY,\n        scale = _a.scale;\n    var wrapperComponent = contextInstance.wrapperComponent,\n        contentComponent = contextInstance.contentComponent;\n    var disabled = contextInstance.setup.disabled;\n    if (disabled || !wrapperComponent || !contentComponent) return;\n    var targetState = {\n      positionX: isNaN(newPositionX) ? positionX : newPositionX,\n      positionY: isNaN(newPositionY) ? positionY : newPositionY,\n      scale: isNaN(newScale) ? scale : newScale\n    };\n    animate(contextInstance, targetState, animationTime, animationType);\n  };\n};\n\nvar resetTransform = function resetTransform(contextInstance) {\n  return function (animationTime, animationType) {\n    if (animationTime === void 0) {\n      animationTime = 200;\n    }\n\n    if (animationType === void 0) {\n      animationType = \"easeOut\";\n    }\n\n    resetTransformations(contextInstance, animationTime, animationType);\n  };\n};\n\nvar centerView = function centerView(contextInstance) {\n  return function (scale, animationTime, animationType) {\n    if (animationTime === void 0) {\n      animationTime = 200;\n    }\n\n    if (animationType === void 0) {\n      animationType = \"easeOut\";\n    }\n\n    var transformState = contextInstance.transformState,\n        wrapperComponent = contextInstance.wrapperComponent,\n        contentComponent = contextInstance.contentComponent;\n\n    if (wrapperComponent && contentComponent) {\n      var targetState = getCenterPosition(scale || transformState.scale, wrapperComponent, contentComponent);\n      animate(contextInstance, targetState, animationTime, animationType);\n    }\n  };\n};\n\nvar zoomToElement = function zoomToElement(contextInstance) {\n  return function (node, scale, animationTime, animationType) {\n    if (animationTime === void 0) {\n      animationTime = 600;\n    }\n\n    if (animationType === void 0) {\n      animationType = \"easeOut\";\n    }\n\n    handleCancelAnimation(contextInstance);\n    var wrapperComponent = contextInstance.wrapperComponent;\n    var target = typeof node === \"string\" ? document.getElementById(node) : node;\n\n    if (wrapperComponent && isValidZoomNode(target) && target && wrapperComponent.contains(target)) {\n      var targetState = calculateZoomToNode(contextInstance, target, scale);\n      animate(contextInstance, targetState, animationTime, animationType);\n    }\n  };\n};\n\nvar getContext = function getContext(contextInstance) {\n  return {\n    instance: contextInstance,\n    state: contextInstance.transformState,\n    zoomIn: zoomIn(contextInstance),\n    zoomOut: zoomOut(contextInstance),\n    setTransform: setTransform(contextInstance),\n    resetTransform: resetTransform(contextInstance),\n    centerView: centerView(contextInstance),\n    zoomToElement: zoomToElement(contextInstance)\n  };\n}; // We want to make event listeners non-passive, and to do so have to check\n// that browsers support EventListenerOptions in the first place.\n// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n\n\nvar passiveSupported = false;\n\nfunction makePassiveEventOption() {\n  try {\n    var options = {\n      get passive() {\n        // This function will be called when the browser\n        //   attempts to access the passive property.\n        passiveSupported = true;\n        return false;\n      }\n\n    };\n    return options;\n  } catch (err) {\n    passiveSupported = false;\n    return passiveSupported;\n  }\n}\n\nvar isExcludedNode = function isExcludedNode(node, excluded) {\n  var targetTagName = node.tagName.toUpperCase();\n  var isExcludedTag = excluded.find(function (tag) {\n    return tag.toUpperCase() === targetTagName;\n  });\n  if (isExcludedTag) return true;\n  var isExcludedClassName = excluded.find(function (className) {\n    return node.classList.contains(className);\n  });\n  if (isExcludedClassName) return true;\n  return false;\n};\n\nvar cancelTimeout = function cancelTimeout(timeout) {\n  if (timeout) {\n    clearTimeout(timeout);\n  }\n};\n\nvar getTransformStyles = function getTransformStyles(x, y, scale) {\n  return \"translate3d(\" + x + \"px, \" + y + \"px, 0) scale(\" + scale + \")\";\n};\n\nvar getCenterPosition = function getCenterPosition(scale, wrapperComponent, contentComponent) {\n  var contentWidth = contentComponent.offsetWidth * scale;\n  var contentHeight = contentComponent.offsetHeight * scale;\n  var centerPositionX = (wrapperComponent.offsetWidth - contentWidth) / 2;\n  var centerPositionY = (wrapperComponent.offsetHeight - contentHeight) / 2;\n  return {\n    scale: scale,\n    positionX: centerPositionX,\n    positionY: centerPositionY\n  };\n};\n\nvar isWheelAllowed = function isWheelAllowed(contextInstance, event) {\n  var _a = contextInstance.setup.wheel,\n      disabled = _a.disabled,\n      wheelDisabled = _a.wheelDisabled,\n      touchPadDisabled = _a.touchPadDisabled,\n      excluded = _a.excluded;\n  var isInitialized = contextInstance.isInitialized,\n      isPanning = contextInstance.isPanning;\n  var target = event.target;\n  var isAllowed = isInitialized && !isPanning && !disabled && target;\n  if (!isAllowed) return false; // Event ctrlKey detects if touchpad action is executing wheel or pinch gesture\n\n  if (wheelDisabled && !event.ctrlKey) return false;\n  if (touchPadDisabled && event.ctrlKey) return false;\n  var isExcluded = isExcludedNode(target, excluded);\n  if (isExcluded) return false;\n  return true;\n};\n\nfunction getDelta(event, customDelta) {\n  var deltaY = event ? event.deltaY < 0 ? 1 : -1 : 0;\n  var delta = checkIsNumber(customDelta, deltaY);\n  return delta;\n}\n\nfunction getMousePosition(event, contentComponent, scale) {\n  var contentRect = contentComponent.getBoundingClientRect();\n  var mouseX = 0;\n  var mouseY = 0;\n\n  if (\"clientX\" in event) {\n    // mouse position x, y over wrapper component\n    mouseX = (event.clientX - contentRect.left) / scale;\n    mouseY = (event.clientY - contentRect.top) / scale;\n  } else {\n    var touch = event.touches[0];\n    mouseX = (touch.clientX - contentRect.left) / scale;\n    mouseY = (touch.clientY - contentRect.top) / scale;\n  }\n\n  if (isNaN(mouseX) || isNaN(mouseY)) console.error(\"No mouse or touch offset found\");\n  return {\n    x: mouseX,\n    y: mouseY\n  };\n}\n\nvar handleCalculateWheelZoom = function handleCalculateWheelZoom(contextInstance, delta, step, disablePadding, getTarget) {\n  var scale = contextInstance.transformState.scale;\n  var wrapperComponent = contextInstance.wrapperComponent,\n      setup = contextInstance.setup;\n  var maxScale = setup.maxScale,\n      minScale = setup.minScale,\n      zoomAnimation = setup.zoomAnimation;\n  var size = zoomAnimation.size,\n      disabled = zoomAnimation.disabled;\n\n  if (!wrapperComponent) {\n    throw new Error(\"Wrapper is not mounted\");\n  }\n\n  var targetScale = scale + delta * (scale - scale * step) * step;\n  if (getTarget) return targetScale;\n  var paddingEnabled = disablePadding ? false : !disabled;\n  var newScale = checkZoomBounds(roundNumber(targetScale, 3), minScale, maxScale, size, paddingEnabled);\n  return newScale;\n};\n\nvar handleWheelZoomStop = function handleWheelZoomStop(contextInstance, event) {\n  var previousWheelEvent = contextInstance.previousWheelEvent;\n  var scale = contextInstance.transformState.scale;\n  var _a = contextInstance.setup,\n      maxScale = _a.maxScale,\n      minScale = _a.minScale;\n  if (!previousWheelEvent) return false;\n  if (scale < maxScale || scale > minScale) return true;\n  if (Math.sign(previousWheelEvent.deltaY) !== Math.sign(event.deltaY)) return true;\n  if (previousWheelEvent.deltaY > 0 && previousWheelEvent.deltaY < event.deltaY) return true;\n  if (previousWheelEvent.deltaY < 0 && previousWheelEvent.deltaY > event.deltaY) return true;\n  if (Math.sign(previousWheelEvent.deltaY) !== Math.sign(event.deltaY)) return true;\n  return false;\n};\n\nvar isPinchStartAllowed = function isPinchStartAllowed(contextInstance, event) {\n  var _a = contextInstance.setup.pinch,\n      disabled = _a.disabled,\n      excluded = _a.excluded;\n  var isInitialized = contextInstance.isInitialized;\n  var target = event.target;\n  var isAllowed = isInitialized && !disabled && target;\n  if (!isAllowed) return false;\n  var isExcluded = isExcludedNode(target, excluded);\n  if (isExcluded) return false;\n  return true;\n};\n\nvar isPinchAllowed = function isPinchAllowed(contextInstance) {\n  var disabled = contextInstance.setup.pinch.disabled;\n  var isInitialized = contextInstance.isInitialized,\n      pinchStartDistance = contextInstance.pinchStartDistance;\n  var isAllowed = isInitialized && !disabled && pinchStartDistance;\n  if (!isAllowed) return false;\n  return true;\n};\n\nvar calculateTouchMidPoint = function calculateTouchMidPoint(event, scale, contentComponent) {\n  var contentRect = contentComponent.getBoundingClientRect();\n  var touches = event.touches;\n  var firstPointX = roundNumber(touches[0].clientX - contentRect.left, 5);\n  var firstPointY = roundNumber(touches[0].clientY - contentRect.top, 5);\n  var secondPointX = roundNumber(touches[1].clientX - contentRect.left, 5);\n  var secondPointY = roundNumber(touches[1].clientY - contentRect.top, 5);\n  return {\n    x: (firstPointX + secondPointX) / 2 / scale,\n    y: (firstPointY + secondPointY) / 2 / scale\n  };\n};\n\nvar getTouchDistance = function getTouchDistance(event) {\n  return Math.sqrt(Math.pow(event.touches[0].pageX - event.touches[1].pageX, 2) + Math.pow(event.touches[0].pageY - event.touches[1].pageY, 2));\n};\n\nvar calculatePinchZoom = function calculatePinchZoom(contextInstance, currentDistance) {\n  var pinchStartScale = contextInstance.pinchStartScale,\n      pinchStartDistance = contextInstance.pinchStartDistance,\n      setup = contextInstance.setup;\n  var maxScale = setup.maxScale,\n      minScale = setup.minScale,\n      zoomAnimation = setup.zoomAnimation;\n  var size = zoomAnimation.size,\n      disabled = zoomAnimation.disabled;\n\n  if (!pinchStartScale || pinchStartDistance === null || !currentDistance) {\n    throw new Error(\"Pinch touches distance was not provided\");\n  }\n\n  if (currentDistance < 0) {\n    return contextInstance.transformState.scale;\n  }\n\n  var touchProportion = currentDistance / pinchStartDistance;\n  var scaleDifference = touchProportion * pinchStartScale;\n  return checkZoomBounds(roundNumber(scaleDifference, 2), minScale, maxScale, size, !disabled);\n};\n\nvar wheelStopEventTime = 160;\nvar wheelAnimationTime = 100;\n\nvar handleWheelStart = function handleWheelStart(contextInstance, event) {\n  var _a = contextInstance.props,\n      onWheelStart = _a.onWheelStart,\n      onZoomStart = _a.onZoomStart;\n\n  if (!contextInstance.wheelStopEventTimer) {\n    handleCancelAnimation(contextInstance);\n    handleCallback(getContext(contextInstance), event, onWheelStart);\n    handleCallback(getContext(contextInstance), event, onZoomStart);\n  }\n};\n\nvar handleWheelZoom = function handleWheelZoom(contextInstance, event) {\n  var _a = contextInstance.props,\n      onWheel = _a.onWheel,\n      onZoom = _a.onZoom;\n  var contentComponent = contextInstance.contentComponent,\n      setup = contextInstance.setup,\n      transformState = contextInstance.transformState;\n  var scale = transformState.scale;\n  var limitToBounds = setup.limitToBounds,\n      centerZoomedOut = setup.centerZoomedOut,\n      zoomAnimation = setup.zoomAnimation,\n      wheel = setup.wheel;\n  var size = zoomAnimation.size,\n      disabled = zoomAnimation.disabled;\n  var step = wheel.step;\n\n  if (!contentComponent) {\n    throw new Error(\"Component not mounted\");\n  }\n\n  event.preventDefault();\n  event.stopPropagation();\n  var delta = getDelta(event, null);\n  var newScale = handleCalculateWheelZoom(contextInstance, delta, step, !event.ctrlKey); // if scale not change\n\n  if (scale === newScale) return;\n  var bounds = handleCalculateBounds(contextInstance, newScale);\n  var mousePosition = getMousePosition(event, contentComponent, scale);\n  var isPaddingDisabled = disabled || size === 0 || centerZoomedOut;\n  var isLimitedToBounds = limitToBounds && isPaddingDisabled;\n\n  var _b = handleCalculateZoomPositions(contextInstance, mousePosition.x, mousePosition.y, newScale, bounds, isLimitedToBounds),\n      x = _b.x,\n      y = _b.y;\n\n  contextInstance.previousWheelEvent = event;\n  contextInstance.setTransformState(newScale, x, y);\n  handleCallback(getContext(contextInstance), event, onWheel);\n  handleCallback(getContext(contextInstance), event, onZoom);\n};\n\nvar handleWheelStop = function handleWheelStop(contextInstance, event) {\n  var _a = contextInstance.props,\n      onWheelStop = _a.onWheelStop,\n      onZoomStop = _a.onZoomStop; // fire animation\n\n  cancelTimeout(contextInstance.wheelAnimationTimer);\n  contextInstance.wheelAnimationTimer = setTimeout(function () {\n    if (!contextInstance.mounted) return;\n    handleAlignToScaleBounds(contextInstance, event.x, event.y);\n    contextInstance.wheelAnimationTimer = null;\n  }, wheelAnimationTime); // Wheel stop event\n\n  var hasStoppedZooming = handleWheelZoomStop(contextInstance, event);\n\n  if (hasStoppedZooming) {\n    cancelTimeout(contextInstance.wheelStopEventTimer);\n    contextInstance.wheelStopEventTimer = setTimeout(function () {\n      if (!contextInstance.mounted) return;\n      contextInstance.wheelStopEventTimer = null;\n      handleCallback(getContext(contextInstance), event, onWheelStop);\n      handleCallback(getContext(contextInstance), event, onZoomStop);\n    }, wheelStopEventTime);\n  }\n};\n\nvar handlePinchStart = function handlePinchStart(contextInstance, event) {\n  var distance = getTouchDistance(event);\n  contextInstance.pinchStartDistance = distance;\n  contextInstance.lastDistance = distance;\n  contextInstance.pinchStartScale = contextInstance.transformState.scale;\n  contextInstance.isPanning = false;\n  handleCancelAnimation(contextInstance);\n};\n\nvar handlePinchZoom = function handlePinchZoom(contextInstance, event) {\n  var contentComponent = contextInstance.contentComponent,\n      pinchStartDistance = contextInstance.pinchStartDistance;\n  var scale = contextInstance.transformState.scale;\n  var _a = contextInstance.setup,\n      limitToBounds = _a.limitToBounds,\n      centerZoomedOut = _a.centerZoomedOut,\n      zoomAnimation = _a.zoomAnimation;\n  var disabled = zoomAnimation.disabled,\n      size = zoomAnimation.size; // if one finger starts from outside of wrapper\n\n  if (pinchStartDistance === null || !contentComponent) return;\n  var midPoint = calculateTouchMidPoint(event, scale, contentComponent); // if touches goes off of the wrapper element\n\n  if (!isFinite(midPoint.x) || !isFinite(midPoint.y)) return;\n  var currentDistance = getTouchDistance(event);\n  var newScale = calculatePinchZoom(contextInstance, currentDistance);\n  if (newScale === scale) return;\n  var bounds = handleCalculateBounds(contextInstance, newScale);\n  var isPaddingDisabled = disabled || size === 0 || centerZoomedOut;\n  var isLimitedToBounds = limitToBounds && isPaddingDisabled;\n\n  var _b = handleCalculateZoomPositions(contextInstance, midPoint.x, midPoint.y, newScale, bounds, isLimitedToBounds),\n      x = _b.x,\n      y = _b.y;\n\n  contextInstance.pinchMidpoint = midPoint;\n  contextInstance.lastDistance = currentDistance;\n  contextInstance.setTransformState(newScale, x, y);\n};\n\nvar handlePinchStop = function handlePinchStop(contextInstance) {\n  var pinchMidpoint = contextInstance.pinchMidpoint;\n  contextInstance.velocity = null;\n  contextInstance.lastDistance = null;\n  contextInstance.pinchMidpoint = null;\n  contextInstance.pinchStartScale = null;\n  contextInstance.pinchStartDistance = null;\n  handleAlignToScaleBounds(contextInstance, pinchMidpoint === null || pinchMidpoint === void 0 ? void 0 : pinchMidpoint.x, pinchMidpoint === null || pinchMidpoint === void 0 ? void 0 : pinchMidpoint.y);\n};\n\nfunction handleDoubleClick(contextInstance, event) {\n  var _a = contextInstance.setup.doubleClick,\n      disabled = _a.disabled,\n      mode = _a.mode,\n      step = _a.step,\n      animationTime = _a.animationTime,\n      animationType = _a.animationType;\n  if (disabled) return;\n\n  if (mode === \"reset\") {\n    return resetTransformations(contextInstance, animationTime, animationType);\n  }\n\n  var scale = contextInstance.transformState.scale;\n  var contentComponent = contextInstance.contentComponent;\n  if (!contentComponent) return console.error(\"No ContentComponent found\");\n  var delta = mode === \"zoomOut\" ? -1 : 1;\n  var newScale = handleCalculateButtonZoom(contextInstance, delta, step);\n  var mousePosition = getMousePosition(event, contentComponent, scale);\n  var targetState = handleZoomToPoint(contextInstance, newScale, mousePosition.x, mousePosition.y);\n\n  if (!targetState) {\n    return console.error(\"Error during zoom event. New transformation state was not calculated.\");\n  }\n\n  animate(contextInstance, targetState, animationTime, animationType);\n}\n\nvar isDoubleClickAllowed = function isDoubleClickAllowed(contextInstance, event) {\n  var isInitialized = contextInstance.isInitialized,\n      setup = contextInstance.setup,\n      wrapperComponent = contextInstance.wrapperComponent;\n  var _a = setup.doubleClick,\n      disabled = _a.disabled,\n      excluded = _a.excluded;\n  var target = event.target;\n  var isWrapperChild = wrapperComponent === null || wrapperComponent === void 0 ? void 0 : wrapperComponent.contains(target);\n  var isAllowed = isInitialized && target && isWrapperChild && !disabled;\n  if (!isAllowed) return false;\n  var isExcluded = isExcludedNode(target, excluded);\n  if (isExcluded) return false;\n  if (!isAllowed) return false;\n  return true;\n};\n\nvar Context = React.createContext(contextInitialState);\n\nvar TransformContext =\n/** @class */\nfunction (_super) {\n  __extends(TransformContext, _super);\n\n  function TransformContext() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.mounted = true;\n    _this.transformState = createState(_this.props);\n    _this.setup = createSetup(_this.props); // Components\n\n    _this.wrapperComponent = null;\n    _this.contentComponent = null; // Initialization\n\n    _this.isInitialized = false;\n    _this.bounds = null; // wheel helpers\n\n    _this.previousWheelEvent = null;\n    _this.wheelStopEventTimer = null;\n    _this.wheelAnimationTimer = null; // panning helpers\n\n    _this.isPanning = false;\n    _this.startCoords = null;\n    _this.lastTouch = null; // pinch helpers\n\n    _this.distance = null;\n    _this.lastDistance = null;\n    _this.pinchStartDistance = null;\n    _this.pinchStartScale = null;\n    _this.pinchMidpoint = null; // velocity helpers\n\n    _this.velocity = null;\n    _this.velocityTime = null;\n    _this.lastMousePosition = null; // animations helpers\n\n    _this.animate = false;\n    _this.animation = null;\n    _this.maxBounds = null; // key press\n\n    _this.pressedKeys = {};\n\n    _this.handleInitializeWrapperEvents = function (wrapper) {\n      // Zooming events on wrapper\n      var passive = makePassiveEventOption();\n      wrapper.addEventListener(\"wheel\", _this.onWheelZoom, passive);\n      wrapper.addEventListener(\"dblclick\", _this.onDoubleClick, passive);\n      wrapper.addEventListener(\"touchstart\", _this.onTouchPanningStart, passive);\n      wrapper.addEventListener(\"touchmove\", _this.onTouchPanning, passive);\n      wrapper.addEventListener(\"touchend\", _this.onTouchPanningStop, passive);\n    };\n\n    _this.handleInitialize = function () {\n      var centerOnInit = _this.setup.centerOnInit;\n\n      _this.applyTransformation();\n\n      _this.forceUpdate();\n\n      if (centerOnInit) {\n        // this has to be redone once the right solution is found\n        // problem is - we need to execute it after mounted component specify it's height / width, images are fetched async so it's tricky\n        setTimeout(function () {\n          if (_this.mounted) {\n            _this.setCenter();\n          }\n        }, 50);\n        setTimeout(function () {\n          if (_this.mounted) {\n            _this.setCenter();\n          }\n        }, 100);\n        setTimeout(function () {\n          if (_this.mounted) {\n            _this.setCenter();\n          }\n        }, 200);\n      }\n    }; //////////\n    // Zoom\n    //////////\n\n\n    _this.onWheelZoom = function (event) {\n      var disabled = _this.setup.disabled;\n      if (disabled) return;\n      var isAllowed = isWheelAllowed(_this, event);\n      if (!isAllowed) return;\n\n      var keysPressed = _this.isPressingKeys(_this.setup.wheel.activationKeys);\n\n      if (!keysPressed) return;\n      handleWheelStart(_this, event);\n      handleWheelZoom(_this, event);\n      handleWheelStop(_this, event);\n    }; //////////\n    // Pan\n    //////////\n\n\n    _this.onPanningStart = function (event) {\n      var disabled = _this.setup.disabled;\n      var onPanningStart = _this.props.onPanningStart;\n      if (disabled) return;\n      var isAllowed = isPanningStartAllowed(_this, event);\n      if (!isAllowed) return;\n\n      var keysPressed = _this.isPressingKeys(_this.setup.panning.activationKeys);\n\n      if (!keysPressed) return;\n      event.preventDefault();\n      event.stopPropagation();\n      handleCancelAnimation(_this);\n      handlePanningStart(_this, event);\n      handleCallback(getContext(_this), event, onPanningStart);\n    };\n\n    _this.onPanning = function (event) {\n      var disabled = _this.setup.disabled;\n      var onPanning = _this.props.onPanning;\n      if (disabled) return;\n      var isAllowed = isPanningAllowed(_this);\n      if (!isAllowed) return;\n\n      var keysPressed = _this.isPressingKeys(_this.setup.panning.activationKeys);\n\n      if (!keysPressed) return;\n      event.preventDefault();\n      event.stopPropagation();\n      handlePanning(_this, event.clientX, event.clientY);\n      handleCallback(getContext(_this), event, onPanning);\n    };\n\n    _this.onPanningStop = function (event) {\n      var onPanningStop = _this.props.onPanningStop;\n\n      if (_this.isPanning) {\n        handlePanningEnd(_this);\n        handleCallback(getContext(_this), event, onPanningStop);\n      }\n    }; //////////\n    // Pinch\n    //////////\n\n\n    _this.onPinchStart = function (event) {\n      var disabled = _this.setup.disabled;\n      var _a = _this.props,\n          onPinchingStart = _a.onPinchingStart,\n          onZoomStart = _a.onZoomStart;\n      if (disabled) return;\n      var isAllowed = isPinchStartAllowed(_this, event);\n      if (!isAllowed) return;\n      handlePinchStart(_this, event);\n      handleCancelAnimation(_this);\n      handleCallback(getContext(_this), event, onPinchingStart);\n      handleCallback(getContext(_this), event, onZoomStart);\n    };\n\n    _this.onPinch = function (event) {\n      var disabled = _this.setup.disabled;\n      var _a = _this.props,\n          onPinching = _a.onPinching,\n          onZoom = _a.onZoom;\n      if (disabled) return;\n      var isAllowed = isPinchAllowed(_this);\n      if (!isAllowed) return;\n      event.preventDefault();\n      event.stopPropagation();\n      handlePinchZoom(_this, event);\n      handleCallback(getContext(_this), event, onPinching);\n      handleCallback(getContext(_this), event, onZoom);\n    };\n\n    _this.onPinchStop = function (event) {\n      var _a = _this.props,\n          onPinchingStop = _a.onPinchingStop,\n          onZoomStop = _a.onZoomStop;\n\n      if (_this.pinchStartScale) {\n        handlePinchStop(_this);\n        handleCallback(getContext(_this), event, onPinchingStop);\n        handleCallback(getContext(_this), event, onZoomStop);\n      }\n    }; //////////\n    // Touch\n    //////////\n\n\n    _this.onTouchPanningStart = function (event) {\n      var disabled = _this.setup.disabled;\n      var onPanningStart = _this.props.onPanningStart;\n      if (disabled) return;\n      var isAllowed = isPanningStartAllowed(_this, event);\n      if (!isAllowed) return;\n      var isDoubleTap = _this.lastTouch && +new Date() - _this.lastTouch < 200;\n\n      if (isDoubleTap && event.touches.length === 1) {\n        _this.onDoubleClick(event);\n      } else {\n        _this.lastTouch = +new Date();\n        handleCancelAnimation(_this);\n        var touches = event.touches;\n        var isPanningAction = touches.length === 1;\n        var isPinchAction = touches.length === 2;\n\n        if (isPanningAction) {\n          handleCancelAnimation(_this);\n          handlePanningStart(_this, event);\n          handleCallback(getContext(_this), event, onPanningStart);\n        }\n\n        if (isPinchAction) {\n          _this.onPinchStart(event);\n        }\n      }\n    };\n\n    _this.onTouchPanning = function (event) {\n      var disabled = _this.setup.disabled;\n      var onPanning = _this.props.onPanning;\n\n      if (_this.isPanning && event.touches.length === 1) {\n        if (disabled) return;\n        var isAllowed = isPanningAllowed(_this);\n        if (!isAllowed) return;\n        event.preventDefault();\n        event.stopPropagation();\n        var touch = event.touches[0];\n        handlePanning(_this, touch.clientX, touch.clientY);\n        handleCallback(getContext(_this), event, onPanning);\n      } else if (event.touches.length > 1) {\n        _this.onPinch(event);\n      }\n    };\n\n    _this.onTouchPanningStop = function (event) {\n      _this.onPanningStop(event);\n\n      _this.onPinchStop(event);\n    }; //////////\n    // Double Click\n    //////////\n\n\n    _this.onDoubleClick = function (event) {\n      var disabled = _this.setup.disabled;\n      if (disabled) return;\n      var isAllowed = isDoubleClickAllowed(_this, event);\n      if (!isAllowed) return;\n      handleDoubleClick(_this, event);\n    }; //////////\n    // Helpers\n    //////////\n\n\n    _this.clearPanning = function (event) {\n      if (_this.isPanning) {\n        _this.onPanningStop(event);\n      }\n    };\n\n    _this.setKeyPressed = function (e) {\n      _this.pressedKeys[e.key] = true;\n    };\n\n    _this.setKeyUnPressed = function (e) {\n      _this.pressedKeys[e.key] = false;\n    };\n\n    _this.isPressingKeys = function (keys) {\n      if (!keys.length) {\n        return true;\n      }\n\n      return Boolean(keys.find(function (key) {\n        return _this.pressedKeys[key];\n      }));\n    };\n\n    _this.setComponents = function (wrapperComponent, contentComponent) {\n      _this.wrapperComponent = wrapperComponent;\n      _this.contentComponent = contentComponent;\n      handleCalculateBounds(_this, _this.transformState.scale);\n\n      _this.handleInitializeWrapperEvents(wrapperComponent);\n\n      _this.handleInitialize();\n\n      _this.handleRef();\n\n      _this.isInitialized = true;\n      handleCallback(getContext(_this), undefined, _this.props.onInit);\n    };\n\n    _this.setTransformState = function (scale, positionX, positionY) {\n      if (!isNaN(scale) && !isNaN(positionX) && !isNaN(positionY)) {\n        if (scale !== _this.transformState.scale) {\n          _this.transformState.previousScale = _this.transformState.scale;\n          _this.transformState.scale = scale;\n        }\n\n        _this.transformState.positionX = positionX;\n        _this.transformState.positionY = positionY;\n\n        _this.applyTransformation();\n      } else {\n        console.error(\"Detected NaN set state values\");\n      }\n    };\n\n    _this.setCenter = function () {\n      if (_this.wrapperComponent && _this.contentComponent) {\n        var targetState = getCenterPosition(_this.transformState.scale, _this.wrapperComponent, _this.contentComponent);\n\n        _this.setTransformState(targetState.scale, targetState.positionX, targetState.positionY);\n      }\n    };\n\n    _this.applyTransformation = function () {\n      if (!_this.mounted || !_this.contentComponent) return;\n      var _a = _this.transformState,\n          scale = _a.scale,\n          positionX = _a.positionX,\n          positionY = _a.positionY;\n      var transform = getTransformStyles(positionX, positionY, scale);\n      _this.contentComponent.style.transform = transform;\n\n      _this.handleRef();\n    };\n\n    _this.handleRef = function () {\n      _this.props.setRef(getContext(_this));\n    };\n\n    return _this;\n  }\n\n  TransformContext.prototype.componentDidMount = function () {\n    var passive = makePassiveEventOption(); // Panning on window to allow panning when mouse is out of component wrapper\n\n    window.addEventListener(\"mousedown\", this.onPanningStart, passive);\n    window.addEventListener(\"mousemove\", this.onPanning, passive);\n    window.addEventListener(\"mouseup\", this.onPanningStop, passive);\n    document.addEventListener(\"mouseleave\", this.clearPanning, passive);\n    window.addEventListener(\"keyup\", this.setKeyUnPressed, passive);\n    window.addEventListener(\"keydown\", this.setKeyPressed, passive);\n    this.handleRef();\n  };\n\n  TransformContext.prototype.componentWillUnmount = function () {\n    var passive = makePassiveEventOption();\n    window.removeEventListener(\"mousedown\", this.onPanningStart, passive);\n    window.removeEventListener(\"mousemove\", this.onPanning, passive);\n    window.removeEventListener(\"mouseup\", this.onPanningStop, passive);\n    window.removeEventListener(\"keyup\", this.setKeyUnPressed, passive);\n    window.removeEventListener(\"keydown\", this.setKeyPressed, passive);\n    handleCancelAnimation(this);\n  };\n\n  TransformContext.prototype.componentDidUpdate = function (oldProps) {\n    if (oldProps !== this.props) {\n      handleCalculateBounds(this, this.transformState.scale);\n      this.setup = createSetup(this.props);\n    }\n  };\n\n  TransformContext.prototype.render = function () {\n    var value = getContext(this);\n    var children = this.props.children;\n    var content = typeof children === \"function\" ? children(value) : children;\n    return React.createElement(Context.Provider, {\n      value: _assign(_assign({}, this.transformState), {\n        setComponents: this.setComponents,\n        contextInstance: this\n      })\n    }, content);\n  };\n\n  return TransformContext;\n}(Component);\n\nvar TransformWrapper = React.forwardRef(function (props, ref) {\n  var _a = useState(null),\n      innerRef = _a[0],\n      setRef = _a[1];\n\n  useImperativeHandle(ref, function () {\n    return innerRef;\n  }, [innerRef]);\n  return React.createElement(TransformContext, _assign({}, props, {\n    setRef: setRef\n  }));\n});\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \".transform-component-module_wrapper__1_Fgj {\\n  position: relative;\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  height: -moz-fit-content;\\n  height: fit-content;\\n  overflow: hidden;\\n  -webkit-touch-callout: none; /* iOS Safari */\\n  -webkit-user-select: none; /* Safari */\\n  -khtml-user-select: none; /* Konqueror HTML */\\n  -moz-user-select: none; /* Firefox */\\n  -ms-user-select: none; /* Internet Explorer/Edge */\\n  user-select: none;\\n  margin: 0;\\n  padding: 0;\\n}\\n.transform-component-module_content__2jYgh {\\n  display: flex;\\n  flex-wrap: wrap;\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  height: -moz-fit-content;\\n  height: fit-content;\\n  margin: 0;\\n  padding: 0;\\n  transform-origin: 0% 0%;\\n}\\n.transform-component-module_content__2jYgh img {\\n  pointer-events: none;\\n}\\n\";\nvar styles = {\n  \"wrapper\": \"transform-component-module_wrapper__1_Fgj\",\n  \"content\": \"transform-component-module_content__2jYgh\"\n};\nstyleInject(css_248z);\n\nvar TransformComponent = function TransformComponent(_a) {\n  var children = _a.children,\n      _b = _a.wrapperClass,\n      wrapperClass = _b === void 0 ? \"\" : _b,\n      _c = _a.contentClass,\n      contentClass = _c === void 0 ? \"\" : _c,\n      wrapperStyle = _a.wrapperStyle,\n      contentStyle = _a.contentStyle;\n  var setComponents = useContext(Context).setComponents;\n  var wrapperRef = useRef(null);\n  var contentRef = useRef(null);\n  useEffect(function () {\n    var wrapper = wrapperRef.current;\n    var content = contentRef.current;\n\n    if (wrapper !== null && content !== null && setComponents) {\n      setComponents(wrapper, content);\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    className: \"react-transform-wrapper \" + styles.wrapper + \" \" + wrapperClass,\n    style: wrapperStyle\n  }, React.createElement(\"div\", {\n    ref: contentRef,\n    className: \"react-transform-component \" + styles.content + \" \" + contentClass,\n    style: contentStyle\n  }, children));\n};\n\nvar useTransformContext = function useTransformContext() {\n  var libraryContext = useContext(Context);\n\n  if (!libraryContext.contextInstance) {\n    throw new Error(\"Transform context mus be placed inside TransformWrapper\");\n  }\n\n  return getContext(libraryContext.contextInstance);\n};\n\nexport { TransformComponent, TransformWrapper, useTransformContext };","map":null,"metadata":{},"sourceType":"module"}